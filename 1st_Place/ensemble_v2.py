#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
"""
Usage:
python3 ensemble_v2.py \
    --data_dir=../../data \
    --model_dir=../../models \
    --out_dir=./ \
    --ens_id=51 \
"""
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

from argparse import ArgumentParser
parser = ArgumentParser()
parser.add_argument('--data_dir', type=str, default='../../data', help='Data directory')
parser.add_argument('--model_dir', type=str, default='../../models', help='Model/predictions directory')
parser.add_argument('--out_dir', type=str, default='./', help='Output directory')
parser.add_argument('--ens_id', type=int, default=51, choices=[51, 22], help='Ensemble id (51 or 22)')
args = parser.parse_args()
print('Command line arguments:')
print(args)

import os
import glob
import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error

n_folds = 5
n_tta = 9 # 0: orig image only, 9: orig images + 9 tta (10 preds total)
csv_name = 'submission_ens_%d.csv' % args.ens_id

train_df = pd.read_csv(os.path.join(args.data_dir, 'train_cv.csv'))
subm_df = pd.read_csv(os.path.join(args.data_dir, 'submission_format.csv'))

if not os.path.exists(args.out_dir):
    os.makedirs(args.out_dir)

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Specify model dirs

ens_51_dirs = [
'run-20210126-0329', 'run-20210125-1843', 'run-20210124-0112', 'run-20210121-1931', 'run-20210126-2217',
'run-20210122-1753', 'run-20210122-1801', 'run-20210126-2313', 'run-20210125-1412', 'run-20210121-2121',
'run-20210107-0150', 'run-20210104-2211', 'run-20210104-2209', 'run-20210107-0152', 'run-20210110-0122',
'run-20210110-2151', 'run-20210107-0151', 'run-20210110-2148', 'run-20210107-0149', 'run-20210110-0109',
'run-20210118-1734', 'run-20210108-1903', 'run-20210124-0156', 'run-20210124-0119', 'run-20210120-0012',
'run-20210120-1324', 'run-20210106-0050', 'run-20210106-0047', 'run-20210124-0131', 'run-20210121-1912',
'run-20210106-0051', 'run-20210107-1527', 'run-20210105-1443', 'run-20210126-1835', 'run-20210104-2157',
'run-20210107-1532', 'run-20210126-1905', 'run-20210112-0019', 'run-20210127-1320', 'run-20210107-1530',
'run-20210110-2200', 'run-20210128-1354', 'run-20210128-0011', 'run-20210128-0014', 'run-20210128-0016',
'run-20210128-0047', 'run-20210128-1545', 'run-20210128-1940', 'run-20210128-1341', 'run-20210128-0045',
'run-20210129-1511',
]

ens_22_dirs = [
'run-20210126-0329', 'run-20210125-1843', 'run-20210124-0112', 'run-20210121-1931', 'run-20210126-2217',
'run-20210122-1753', 'run-20210122-1801', 'run-20210126-2313', 'run-20210125-1412', 'run-20210121-2121',
'run-20210107-0150', 'run-20210104-2211', 'run-20210107-0152', 'run-20210110-0122', 'run-20210107-0151',
'run-20210118-1734', 'run-20210106-0047', 'run-20210112-0019', 'run-20210110-2200',  'run-20210131-1822',
'run-20210131-1840', 'run-20210131-1951'
]

if args.ens_id == 51:
    dirs = ens_51_dirs
else:
    dirs = ens_22_dirs

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

sorting_ids = np.array([  
         0, 480,  10, 470, 484,  20,  30, 485,  40,  50, 474, 473,  60,
        70, 483, 500,  12,  44,  14, 482,  11,  80,  74,  90, 481, 471,
         4,  73,  41,  42,  55, 430, 475,  53,  13,  24,  31,   1,  34,
       472,  81,   5,  75,  23,  54,   3,   9,  25,  51,  15,  85,  32,
        71,  21,  64,  84,  62,  79, 420, 504, 434,  45, 450,  78,  94,
        22,   6,  72, 479, 476, 435,  52, 433,  49,  65,   2,  77,  76,
        43,  82, 424, 431,  83,  16, 439, 490,  46, 486, 423, 505,  48,
        61, 477, 436,  92,  33, 478, 437,  59,  19,  63,  27, 438,  47,
         8,   7, 454,  93, 487, 503, 489,  36, 452,  35, 496,  89, 432,
       502,  86,  29, 425,  17,  88,  18,  95, 455, 488, 493,  57,  99,
       426,  26,  37,  58,  28,  98, 494,  91, 491, 451, 422,  56, 495,
        39, 498, 427, 499,  96,  38, 421, 497, 501, 100,  87, 492,  68,
       459,  97,  69, 110, 429, 506, 120, 130, 140, 428, 453,  66, 150,
       160, 456, 444,  67, 440, 458, 508, 170, 457, 509, 442, 114, 441,
       180, 190, 445, 443, 200, 144, 447, 210, 124, 449, 104, 134, 151,
       164, 213, 154, 103, 448, 101, 507, 139, 112, 214, 111, 141, 446,
       145, 174, 106, 153, 115, 136, 171, 132, 143, 113, 131, 169, 161,
       138, 165, 163, 105, 184, 102, 133, 135, 201, 220, 142, 230, 146,
       152, 217, 116, 122, 121, 126, 137, 155, 129, 125, 107, 166, 215,
       185, 173, 109, 128, 119, 127, 216, 108, 191, 199, 194, 149, 218,
       172, 123, 148, 212, 189, 211, 167, 183, 117, 219, 182, 196, 118,
       168, 202, 181, 162, 206, 204, 240, 159, 193, 186, 147, 192, 203,
       156, 158, 195, 157, 176, 175, 188, 231, 187, 209, 221, 198, 197,
       250, 260, 177, 223, 234, 179, 233, 178, 414, 208, 207, 205, 410,
       244, 241, 235, 232, 270, 239, 411, 225, 280, 264, 236, 222, 413,
       224, 262, 265, 254, 299, 261, 415, 251, 237, 252, 245, 243, 274,
       460, 290, 255, 242, 253, 263, 283, 300, 238, 273, 417, 412, 304,
       275, 416, 281, 272, 285, 282, 226, 302, 269, 271, 419, 296, 284,
       465, 462, 297, 298, 267, 310, 301, 279, 418, 464, 461, 229, 256,
       463, 266, 228, 276, 248, 268, 468, 278, 305, 277, 315, 258, 311,
       259, 312, 295, 303, 227, 319, 294, 257, 317, 469, 246, 320, 466,
       314, 286, 293, 316, 318, 249, 313, 288, 323, 330, 467, 289, 287,
       324, 291, 292, 325, 321, 247, 309, 308, 331, 322, 340, 307, 329,
       327, 306, 334, 332, 328, 350, 341, 326, 349, 343, 345, 346, 360,
       336, 389, 342, 344, 339, 348, 355, 354, 351, 347, 370, 337, 388,
       352, 380, 335, 390, 387, 353, 333, 386, 400, 356, 361, 359, 383,
       385, 338, 384, 358, 357, 399, 381, 391, 397, 396, 398, 395, 374,
       394, 382, 393, 392, 404, 373, 364, 371, 362, 369, 372, 375, 406,
       405, 403, 409, 376, 407, 408, 379, 402, 378, 401, 367, 366, 365,
       363, 377, 368])


coefs_best = np.array([
       0.5 , 0.65, 0.85, 1.04, 0.77, 0.86, 0.92, 0.97, 0.88, 0.95, 0.94,
       0.85, 0.97, 0.99, 0.87, 0.96, 0.96, 0.99, 1.06, 1.04, 1.02, 1.  ,
       0.99, 1.02, 1.02, 1.05, 0.98, 1.08, 1.01, 0.94, 0.95, 1.  , 1.  ,
       0.99, 0.98, 1.  , 1.01, 0.98, 1.02, 0.98, 0.99, 1.02, 0.98, 1.08,
       1.02, 0.92, 1.03, 1.01, 0.96, 0.93, 1.03, 1.05, 1.04, 1.  , 1.05,
       1.  , 0.94, 1.06, 0.96, 1.  , 1.02, 0.96, 0.98, 1.01, 1.  , 0.98,
       1.06, 0.98, 0.98, 0.97, 1.03, 1.  , 0.98, 0.97, 1.07, 0.97, 1.01,
       1.03, 1.01, 0.95, 1.01, 1.  , 0.98, 0.98, 1.  , 1.  , 1.04, 0.97,
       1.02, 0.98, 1.05, 1.  , 1.02, 1.  , 0.99, 1.01, 1.01, 0.98, 0.99,
       0.97, 0.98, 1.  , 1.04, 1.02, 1.  , 1.01, 0.99, 1.02, 1.02, 1.03,
       0.96, 1.03, 1.05, 0.93, 1.01, 1.04, 1.  , 1.  , 1.02, 1.  , 1.02,
       0.96, 1.02, 1.04, 0.97, 1.  , 1.01, 1.01, 0.95, 1.  , 1.03, 0.98,
       1.01, 0.98, 0.99, 1.08, 1.04, 0.99, 0.99, 1.  , 1.01, 1.  , 1.03,
       0.98, 0.99, 0.98, 1.01, 0.99, 1.01, 0.97, 1.03, 0.88, 1.03, 1.06,
       0.97, 1.  , 0.98, 1.  , 0.9 , 1.02, 0.98, 0.99, 0.98, 0.99, 1.  ,
       1.06, 0.99, 1.01, 0.95, 1.01, 1.01, 0.99, 1.04, 0.97, 1.  , 1.02,
       1.  , 1.02, 1.  , 1.  , 1.  , 1.  , 1.05, 1.  , 0.98, 0.94, 0.99,
       0.98, 1.03, 0.99, 1.01, 1.03, 0.99, 0.96, 0.99, 0.98, 1.03, 1.  ,
       1.01, 1.01, 0.99, 0.97, 1.01, 1.01, 1.01, 0.98, 1.01, 0.99, 1.  ,
       0.98, 0.99, 1.  , 1.  , 1.01, 1.04, 1.  , 0.98, 1.01, 0.97, 1.02,
       0.99, 1.  , 1.  , 1.03, 0.99, 1.02, 0.99, 1.01, 0.98, 1.02, 1.  ,
       1.04, 0.96, 1.02, 0.99, 1.  , 1.02, 1.  , 1.  , 1.  , 0.98, 1.  ,
       0.99, 1.01, 1.  , 0.99, 0.99, 0.99, 1.04, 0.99, 1.01, 0.99, 1.01,
       0.99, 1.02, 1.  , 1.02, 1.  , 0.98, 0.99, 1.01, 1.  , 1.01, 0.98,
       1.01, 1.01, 0.99, 0.99, 1.02, 1.  , 1.  , 1.  , 0.99, 1.02, 0.99,
       1.02, 1.01, 0.99, 1.01, 1.  , 0.99, 1.  , 1.  , 1.01, 0.99, 1.  ,
       1.  , 1.  , 0.98, 1.  , 1.01, 1.  , 0.99, 1.01, 1.03, 0.99, 1.01,
       0.99, 1.01, 1.07, 0.98, 0.99, 1.  , 1.02, 0.99, 0.99, 0.95, 1.  ,
       1.  , 1.01, 1.02, 1.  , 1.  , 1.02, 1.  , 0.94, 1.02, 1.  , 1.01,
       0.99, 1.03, 1.01, 1.  , 1.  , 1.01, 0.99, 1.  , 1.01, 0.96, 1.01,
       1.01, 0.98, 1.01, 1.  , 1.03, 1.  , 0.98, 0.98, 0.99, 1.02, 0.99,
       1.02, 1.01, 0.97, 1.01, 1.01, 0.99, 0.99, 1.02, 0.98, 1.01, 0.99,
       1.01, 1.  , 1.  , 0.99, 1.03, 1.  , 1.02, 1.  , 1.  , 1.03, 0.99,
       1.03, 0.98, 1.  , 1.  , 1.  , 0.98, 1.  , 1.01, 1.  , 1.01, 1.01,
       1.02, 1.  , 0.99, 1.01, 1.  , 1.  , 0.99, 0.99, 1.03, 0.99, 1.  ,
       0.99, 0.99, 1.02, 1.01, 0.99, 0.99, 1.01, 1.  , 1.01, 1.  , 0.97,
       1.01, 1.  , 1.01, 0.99, 0.99, 1.02, 1.02, 0.98, 1.01, 1.  , 1.  ,
       0.99, 0.99, 1.01, 1.  , 1.  , 1.  , 1.01, 1.  , 0.99, 0.99, 1.  ,
       1.01, 0.99, 1.01, 1.02, 1.  , 0.98, 1.  , 1.01, 1.01, 1.01, 0.99,
       1.  , 1.  , 1.  , 1.01, 1.01, 0.99, 1.  , 0.99, 1.01, 1.  , 1.  ,
       1.  , 1.  , 1.02, 1.  , 1.01, 1.  , 0.99, 0.98, 1.01, 1.01, 0.99,
       0.94, 1.01, 1.02, 1.  , 1.  , 1.  , 1.02, 0.99, 1.  , 0.99, 1.  ,
       0.98, 1.  , 0.99, 1.01, 1.01, 0.99, 1.  , 1.  , 0.99, 1.01, 1.  ,
       1.01, 1.  , 0.99, 1.  , 1.  , 1.01, 1.01, 1.  , 1.  , 0.99, 1.01,
       1.  , 0.99, 1.02, 1.01, 1.01, 0.98, 1.01, 0.99, 0.98, 1.01, 1.  ,
       0.99, 1.02, 0.99, 1.  , 1.01, 1.  , 1.  , 1.  , 1.01, 0.99, 1.  ,
       1.  , 1.  , 1.01])


#------------------------------------------------------------------------------
# Create submission for test set
#------------------------------------------------------------------------------

print('Collecting TEST predictions...')
y_preds_test = []
for counter, d in enumerate(dirs):
    for tta_id in range((n_tta + 1)):
        y_preds_folds = []
        for fold_id in range(n_folds):
            y_preds_folds.append( np.load(os.path.join(args.model_dir, d, 'preds_new', 'y_pred_test_fold_%d_tta_%d.npy' % (fold_id, tta_id))).ravel() )
        y_preds_test.append(np.mean(y_preds_folds, axis=0))
    if counter % 10 == 0:
        print(counter)
assert len(y_preds_test) == (n_tta + 1) * len(dirs)

# Sort according to val predictions order
# !! Each prediction in a ROW
y_preds_test_sorted = np.array(y_preds_test)[sorting_ids]

# Apply best coefs
y_pred_test_final = y_preds_test_sorted[0]
for pred_id in range(1, (n_tta + 1) * len(dirs)):
    y_pred_test_final = coefs_best[pred_id-1] * y_pred_test_final + (1 - coefs_best[pred_id-1]) * y_preds_test_sorted[pred_id]

y_pred_test_final = np.int32(np.round(y_pred_test_final))

print('Creating submission...')

subm_df['wind_speed'] = y_pred_test_final
subm_df.to_csv(os.path.join(args.out_dir, csv_name), index=False)
subm_df.head()

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

